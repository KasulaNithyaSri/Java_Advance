PROGRAM ON CIRCULAR SINGLE LINKED LIST


SOURCE CODE:



import java.util.*;
class Node{
	int data;
	Node next;
	Node(int x){
		data=x;
		next=null;
	}

}
class CircularList{
	Node head;
	CircularList(){
		head=null;
	}
	void create(int x){
		Node n=new Node(x);
		if(head==null){
			head=n;
			n.next=head;
		}
		else{
			Node temp=head;
			while(temp.next!=head){
				temp=temp.next;
			}	
			n.next=head;
			temp.next=n;
		}
	}
	void display(){
		if(head==null){
			System.out.println("List is Empty");
		}
		
		Node temp=head;
		while(temp.next!=head){
			System.out.print(temp.data+" ");
			temp=temp.next;
		}
		System.out.print(temp.data);
		
	}
	void insertFirst(int x){
		Node n=new Node(x);
		if(head==null){
			head=n;
			n.next=head;
		}
		else{
			
			Node temp=head;
			while(temp.next!=head){
				temp=temp.next;
			}
			n.next=head;
			head=n;
			temp.next=head;
		}
	}	
	void insertAtPosition(int x,int pos){
		Node n=new Node(x);
		Node temp=head;
		int count=2;	
		if(head==null){
			head=n;
			n.next=head;
		}
		if(pos==1){
			while(temp.next!=head){
				temp=temp.next;	
			}
			n.next=head;
			head=n;
			temp.next=head;
		}
			
		else{
			while(temp.next!=head && count<pos){
				count++;
				temp=temp.next;
			}
			if(temp.next==head){
			n.next=head;
			temp.next=n;	
			}
			else{
			n.next=temp.next;
			temp.next=n;
			}
			
		}
	}	
			
	void deleteFirst(){
		Node temp=head;
		if(head==null){
			System.out.println("List is Empty");
 		}
		
		else{
			System.out.println(head.data+" is deleted ");
			while(temp.next!=head){
				temp=temp.next;
			}
			Node temp1=head;
			head=head.next;
			temp1.next=null;
			temp.next=head;
		}
	}
	void deleteLast(){
		Node temp=head;
		if(head==null){
			System.out.println("List is Empty");
		}
		if(head.next==head){
			System.out.println(head.data+" is deleted ");
			head=null;
		}

		else{
			while(temp.next.next!=head){
				temp=temp.next;
			}
			Node temp1=temp;
			System.out.println(temp1.next.data+" is deleted ");
			temp1.next.next=null;
			temp.next=head;
			
		}
	}
	void deletePosition(int pos){
		int count=2;
		
		if(head==null){
			System.out.println("List is Empty");
		}
		if(pos ==1){
			System.out.println(head.data+" is deleted ");
			Node temp=head;
			while(temp.next!=head){
				temp=temp.next;
			}
			Node temp1=head;
			head=head.next;
			temp1=null;
			temp.next=head;
		}
			
		else{
			Node temp=head;
			while(temp.next!=head && count<pos){
				count++;
				temp=temp.next;
			}
			if(pos==count){
				System.out.println(temp.next.data+" is deleted ");
				Node temp1=temp.next;
				temp.next=temp.next.next;
				temp1=null;
			}
			else{
				Node temp1=temp.next;
				System.out.println(temp1.data+" is deleted");
				temp.next=head;
				temp1=null;
			}
		}
	}

}
class Circular_Linked_List{
	public static void main(String[] args){
		Scanner s=new Scanner(System.in);
		CircularList c1=new CircularList();
		for(;;){
		System.out.println("\nEnter your choice:\n1.Create\n2.Display\n3.Insert at Beginning\n4.Insert At Position\n5.Delete At First\n6.Delete Last\n7.Delete At Position\n8.Exit\n");
		int ch=s.nextInt();
		if(ch==1){
			System.out.println("Enter the value: ");
			int x=s.nextInt();
			c1.create(x);
		}
		else if(ch==2){
			c1.display();		
		}
		else if(ch==3){
			System.out.println("Enter the value: ");
			int x=s.nextInt();
			c1.insertFirst(x);
		}
		else if(ch==4){
			System.out.println("Enter the value: ");
			int x=s.nextInt();
			System.out.println("Enter the position: ");
			int pos=s.nextInt();
			c1.insertAtPosition(x,pos);
		
		}
		else if(ch==5){
			c1.deleteFirst();
		}
		else if(ch==6){
			c1.deleteLast();
		}
		else if(ch==7){
			System.out.println("Enter Position: ");
			int pos=s.nextInt();
			c1.deletePosition(pos);
		}
		else if(ch==8){
			break;
		}
		else{
			System.out.println("Invalid Choice");
		}
		}
	}
} 
			
